package org.akashihi.osm.spark

import java.util.Properties

import org.apache.spark.sql._
import org.apache.spark.sql.functions._

object WriteOsmosis {
  private def escapePgHstore(hmap: Map[String, String]): String = {
    hmap.mapValues(_.replaceAll(""""+""", "")).map { case (key, value) => s""" "$key"=>"$value" """ }.mkString(",")
  }
  private val escapePgHstoreUdf = udf(escapePgHstore _)

  /**
   * Writes OSM formatted dataframe to the Osmosis format
   * postgis database.
   *
   * There are two things, that needs your attention:
   * - nodes table should be created without geom column or with nullable geom columen,
   * which needs to be (created and) populated after writing the data with the following
   * query: 'UPDATE nodes SET geom = ST_SetSRID(ST_MakePoint(lon, lat), 4326);'
   * - Fields 'sequence_id' in both node_ways and relation members tables should have
   * default value generated by sequence. This can be achieved by issuing following commands:
   *   create sequence generator;
   *   alter table way_nodes alter column sequence_id set default nextval('generator');
   *   alter table relation_members alter column sequence_id set default nextval('generator');
   * - INFO part of the OSM dataset is not supported yet and related fields are filled with stub values.
   * Therefore fake user should be created: insert into users (1, 'spark');
   *
   * Osmosis database can be converted to OSM XML file with
   * osmosis --read-pgsql host="x" database="x" user="x" password="x" --dataset-dump --write-xml file="myfile.osm"
   *
   * @param osm OSM format dataframe
   * @param db Database configuration properties.
   */
  def apply(osm: DataFrame, db: Properties): Unit = {
    //Configure jdbc for hstore
    db.put("stringtype", "unspecified")

    //Prepare dataset for writing
    //TODO Add INFO fields support
    val osmosis = osm.withColumn("tags", escapePgHstoreUdf(col("TAG")))
      .drop("TAG")
      .withColumn("version", lit(1))
      .withColumn("user_id", lit(1))
      .withColumn("tstamp", lit("1970-01-01T23:59:59"))
      .withColumn("changeset_id", lit(1)).cache()


    //Write nodes first
    osmosis.filter(col("TYPE") === OsmEntity.NODE)
      .select("ID", "version", "user_id", "tstamp", "changeset_id", "LAT", "LON", "tags")
      .write
      .mode(SaveMode.Overwrite)
      .option("driver", "org.postgresql.Driver")
      .option("truncate", value = true)
      .jdbc(db.getProperty("url"), "nodes", db)

    //Write ways after nodes
    osmosis.filter(col("TYPE") === OsmEntity.WAY)
      .withColumnRenamed("WAY", "nodes")
      .select("ID", "version", "user_id", "tstamp", "changeset_id", "nodes", "tags")
      .write
      .mode(SaveMode.Overwrite)
      .option("driver", "org.postgresql.Driver")
      .option("truncate", value = true)
      .jdbc(db.getProperty("url"), "ways", db)

    //Then link ways to the nodes
    osmosis.filter(col("TYPE") === OsmEntity.WAY)
      .withColumn("node_id", explode(col("WAY")))
      .withColumnRenamed("ID", "way_id")
      .select("way_id", "node_id")
      .write
      .mode(SaveMode.Overwrite)
      .option("driver", "org.postgresql.Driver")
      .option("truncate", value = true)
      .jdbc(db.getProperty("url"), "way_nodes", db)

    //Finally write relations
    osmosis.filter(col("TYPE") === OsmEntity.RELATION)
      .select("ID", "version", "user_id", "tstamp", "changeset_id", "tags")
      .write
      .mode(SaveMode.Overwrite)
      .option("driver", "org.postgresql.Driver")
      .option("truncate", value = true)
      .jdbc(db.getProperty("url"), "relations", db)

    //And relations members
    osmosis.filter(col("TYPE") === OsmEntity.RELATION)
      .withColumn("member", explode(col("RELATION")))
      .select("ID", "MEMBER")
      .withColumn("member_id", col("MEMBER")("ID"))
      .withColumn("member_role", col("MEMBER")("ROLE"))
      .withColumn("member_type", when(col("MEMBER")("TYPE") === 0, lit("N")).when(col("MEMBER")("TYPE") === 1, lit("W")).when(col("MEMBER")("TYPE") === 2, lit("R")))
      .withColumnRenamed("ID", "relation_id")
      .select("relation_id", "member_id", "member_type", "member_role")
      .write
      .mode(SaveMode.Overwrite)
      .option("driver", "org.postgresql.Driver")
      .option("truncate", value = true)
      .jdbc(db.getProperty("url"), "relation_members", db)
  }
}
